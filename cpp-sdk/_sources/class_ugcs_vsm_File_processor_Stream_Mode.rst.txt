.. index:: pair: class; ugcs::vsm::File_processor::Stream::Mode
.. _doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode:

class ugcs::vsm::File_processor::Stream::Mode
=============================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

:ref:`Mode <doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode>` for file opening. :ref:`More...<details-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <file_processor.h>
	
	class Mode
	{
	public:
		// fields
	
		bool :ref:`read<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1aaf88732e5d5a3708bf8f730e5b9fc1ba>`:1;
		bool :ref:`write<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1ad89b7a5492ab77ed87b098e7713d8cf0>`:1;
		bool :ref:`extended<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1ac55756fcfb8610cd9830dbcb4e75d8f8>`:1;
		bool :ref:`should_not_exist<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1a87f3bf486b04cc10a94bec3cc150fae2>`:1;

		// construction
	
		:ref:`Mode<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1a1a1641d1d7a8b8e1c1e47c7c46fabe56>`(const std::string& mode_str);
	};
.. _details-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`Mode <doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode>` for file opening.

Fields
------

.. index:: pair: variable; read
.. _doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1aaf88732e5d5a3708bf8f730e5b9fc1ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool read:1

Read access.

.. index:: pair: variable; write
.. _doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1ad89b7a5492ab77ed87b098e7713d8cf0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool write:1

Write access.

File is truncated when opened.

.. index:: pair: variable; extended
.. _doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1ac55756fcfb8610cd9830dbcb4e75d8f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool extended:1

Extended access (corresponds to "+" in opening mode string.

File is not truncated when opened for write and also can be read. Also can be written when opened for read.

.. index:: pair: variable; should_not_exist
.. _doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1a87f3bf486b04cc10a94bec3cc150fae2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool should_not_exist:1

File should not exist 1) When used with write access: If specified, opening fails if file is already existing.

If not specified, new file is created if it does not exist. 2) When used with read access: If specified, file is created if file does not exist. If not specified, opening fails if file does not exist. NOTE 'x' with 'r' combination is not allowed in standard fopen() call. It is our extension to allow creation new file while opening it in read-only mode. (Does not mean that file on filesystem is read only.)

Construction
------------

.. index:: pair: function; Mode
.. _doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode_1a1a1641d1d7a8b8e1c1e47c7c46fabe56:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mode(const std::string& mode_str)

Parse and validate mode string into binary structure.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mode_str

		- :ref:`Mode <doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode>` string, format is similar to fopen() function mode argument.

	*
		- Invalid_param_exception

		- if mode string is not valid.


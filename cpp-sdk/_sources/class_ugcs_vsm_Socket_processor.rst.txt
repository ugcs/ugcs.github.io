.. index:: pair: class; ugcs::vsm::Socket_processor
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor:

class ugcs::vsm::Socket_processor
=================================

.. toctree::
	:hidden:

	class_ugcs_vsm_Socket_processor_Stream.rst

Overview
~~~~~~~~

Socket processor. :ref:`More...<details-d0/d76/classugcs_1_1vsm_1_1_socket__processor>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <socket_processor.h>
	
	class Socket_processor: public :ref:`ugcs::vsm::Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`
	{
	public:
		// typedefs
	
		typedef std::shared_ptr<Socket_processor> :ref:`Ptr<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a650e0cf75fab37eb6884f058f6906d85>`;
		typedef std::weak_ptr<Socket_processor> :ref:`Weak_ptr<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a6b5e193057a8a4edeab0d2ad02e21416>`;
		typedef :ref:`Stream<doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream>` :ref:`Socket_listener<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a03854bcf03fb287a587a18d8b6a29edf>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, std::string, std::string, std::list<addrinfo>, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> :ref:`Get_addr_info_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a7d14c9d66e0a00ca7244f988b11708fc>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, :ref:`Stream::Ref<doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream_1a3ac30f4fddc1fb6d3884ec90a1ab4894>`, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> :ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>`;
		typedef :ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` :ref:`Connect_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a981163c55f04931c28b24f5da9374e27>`;

		// classes
	
		class :ref:`Stream<doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream>`;

		// construction
	
		:ref:`Socket_processor<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a734eec1bde8245f93727e23398b246fa>`(:ref:`Piped_request_waiter::Ptr<doxid-da/dcf/classugcs_1_1vsm_1_1_piped__request__waiter_1a918818264a1eaec8df8e215110c303e9>` piped_waiter = :ref:`Piped_request_waiter::Create<doxid-da/dcf/classugcs_1_1vsm_1_1_piped__request__waiter_1afa643c4758cdf8f486492653b14749a7>`());

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ade21796f4ede049e11a82e23cac3f6b0>`(Args&&... args);
	
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a96351447a41093bc775e01a17ff39cb0>`();
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Get_instance<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ab15bdb5ad31d197c34e1f34809a4e4c5>`(Args&&... args);
	
		static std::list<:ref:`Local_interface<doxid-dd/de5/classugcs_1_1vsm_1_1_local__interface>`> :target:`Enumerate_local_interfaces<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a99f9eb62e2afab94be349ba85c48870e>`();
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :target:`Connect<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a400c115c4ae46e81a7059a86a484e369>`(
			std::string host,
			std::string service,
			:ref:`Connect_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a981163c55f04931c28b24f5da9374e27>` completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(),
			:ref:`Io_stream::Type<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0b>` sock_type = :ref:`Io_stream::Type::TCP<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0bab136ef5f6a01d816991fe3cf7a6ac763>`,
			Socket_address::Ptr src_addr = nullptr
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :target:`Connect<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a79392b74665df02c9e71e20791d794cb>`(
			Socket_address::Ptr dest_addr,
			:ref:`Connect_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a981163c55f04931c28b24f5da9374e27>` completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(),
			:ref:`Io_stream::Type<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0b>` sock_type = :ref:`Io_stream::Type::TCP<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0bab136ef5f6a01d816991fe3cf7a6ac763>`,
			Socket_address::Ptr src_addr = nullptr
			);
	
		template <class Callback_ptr>
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Accept<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a4e7a13bb90769bc75d7d9115f1e7d01c>`(
			:ref:`Socket_listener::Ref<doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream_1a3ac30f4fddc1fb6d3884ec90a1ab4894>` listener,
			Callback_ptr completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Get_addr_info<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a0d6427f6154efe74f06cd5e8503de387>`(
			const std::string& host,
			const std::string& service,
			addrinfo* hints,
			:ref:`Get_addr_info_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a7d14c9d66e0a00ca7244f988b11708fc>` completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :target:`Listen<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ad23b57a0d823841cb5974df37409ea1a>`(
			const std::string& host,
			const std::string& service,
			:ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(),
			:ref:`Io_stream::Type<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0b>` sock_type = :ref:`Io_stream::Type::TCP<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0bab136ef5f6a01d816991fe3cf7a6ac763>`
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :target:`Listen<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a6a18533b48c4c3cf255711a73e04398a>`(
			Socket_address::Ptr addr,
			:ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(),
			:ref:`Io_stream::Type<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0b>` sock_type = :ref:`Io_stream::Type::TCP<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0bab136ef5f6a01d816991fe3cf7a6ac763>`
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Bind_udp<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1aa7b29cfca07e08520bde0939ae1d6e09>`(
			Socket_address::Ptr addr,
			:ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(),
			bool multicast = false
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Bind_can<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ad83b8d829a52e2a9d2dcef3879c1c4f3>`(
			std::string interface,
			std::vector<int> filter_messges,
			:ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` completion_handler,
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		typedef std::shared_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>`;
		typedef std::weak_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Weak_ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a77243b55b39633082db0c3728a8a85b0>`;
		typedef std::shared_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>`;
		typedef std::weak_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Weak_ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1adbab27f2c1072dce5c5c2486ee9ecb07>`;

		// enums
	
		enum :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>`;

		// classes
	
		class :ref:`Request<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request>`;
		class :ref:`Request_waiter<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter>`;

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ad29f54929b9e5f8645ec52a1e45adb12>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a0d3beca821012a86a256c28e7dfc4fde>`() const;
		bool :ref:`Check_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ac38d8f9f00ad0a9d4b449dff33b0cdab>`(:ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` mask);
		void :ref:`Submit_request<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aeee82d0de5351f069e41e3317a3f5ba8>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request);
		void :ref:`Submit_request_locked<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a6aae7a556f97447859ea1cd406ca90f1>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request, :ref:`Request_waiter::Locker<doxid-dc/d0c/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1_1_locker>` locker);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a580718bc6c93f68817a75779c269c7c0>`(int requests_limit = 0);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a9101999857946b533c5473db74995dcb>`(std::unique_lock<std::mutex>& lock, int requests_limit = 0);
		void :ref:`Set_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ae5bc52cbb72f4009abbdb749c84ea9d8>`(:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter);
		:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` :ref:`Get_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a97a3a455484bfd258139f1d9b69ea0c8>`() const;
		const std::string& :ref:`Get_name<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ab9745410bec2e31145de2ad61aec1038>`();
		void :ref:`Enable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aad7864e6f1e03e84d869cbca8dc3df06>`();
		void :ref:`Disable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aa68b072400c148d77a5fab4529e68d8e>`();
		bool :ref:`Is_enabled<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a787201d195b1038a816d4c81785f2765>`() const;
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1aa503edaf7008fa1a923113518e074018>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a93add2d34731e5e8a0450e555fac5479>`() const;
		:ref:`Request_container<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a6f987fcab9f10ab1812601dbad9316e3>`(const std::string& name, :ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter = :ref:`Request_waiter::Create<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a091f8971c953ca128e84d91567b00b52>`());

.. _details-d0/d76/classugcs_1_1vsm_1_1_socket__processor:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Socket processor.

Typedefs
--------

.. index:: pair: typedef; Ptr
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a650e0cf75fab37eb6884f058f6906d85:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::shared_ptr<Socket_processor> Ptr

Pointer type.

.. index:: pair: typedef; Weak_ptr
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a6b5e193057a8a4edeab0d2ad02e21416:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::weak_ptr<Socket_processor> Weak_ptr

Pointer type.

.. index:: pair: typedef; Socket_listener
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a03854bcf03fb287a587a18d8b6a29edf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Stream<doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream>` Socket_listener

:ref:`Stream <doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream>` type is used for listener socket type also.

.. index:: pair: typedef; Get_addr_info_handler
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a7d14c9d66e0a00ca7244f988b11708fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, std::string, std::string, std::list<addrinfo>, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> Get_addr_info_handler

:ref:`Callback <doxid-d6/d1e/classugcs_1_1vsm_1_1_callback>` used in :ref:`Get_addr_info() <doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a0d6427f6154efe74f06cd5e8503de387>`

.. index:: pair: typedef; Listen_handler
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, :ref:`Stream::Ref<doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream_1a3ac30f4fddc1fb6d3884ec90a1ab4894>`, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> Listen_handler

:ref:`Callback <doxid-d6/d1e/classugcs_1_1vsm_1_1_callback>` used in :ref:`Listen() <doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ad23b57a0d823841cb5974df37409ea1a>`

.. index:: pair: typedef; Connect_handler
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a981163c55f04931c28b24f5da9374e27:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` Connect_handler

:ref:`Callback <doxid-d6/d1e/classugcs_1_1vsm_1_1_callback>` used in :ref:`Connect() <doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a400c115c4ae46e81a7059a86a484e369>` is the same as for listen handler.

Construction
------------

.. index:: pair: function; Socket_processor
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a734eec1bde8245f93727e23398b246fa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Socket_processor(:ref:`Piped_request_waiter::Ptr<doxid-da/dcf/classugcs_1_1vsm_1_1_piped__request__waiter_1a918818264a1eaec8df8e215110c303e9>` piped_waiter = :ref:`Piped_request_waiter::Create<doxid-da/dcf/classugcs_1_1vsm_1_1_piped__request__waiter_1afa643c4758cdf8f486492653b14749a7>`())

Constructor.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- piped_waiter

		- Request waiter based on a pipe to multiplex socket and request operations using select.

Methods
-------

.. index:: pair: function; Create
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ade21796f4ede049e11a82e23cac3f6b0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` Create(Args&&... args)

Create an instance.

.. index:: pair: function; Create
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a96351447a41093bc775e01a17ff39cb0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` Create()

Create processor instance.

.. index:: pair: function; Get_instance
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ab15bdb5ad31d197c34e1f34809a4e4c5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` Get_instance(Args&&... args)

Get global or create new processor instance.

.. index:: pair: function; Accept
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a4e7a13bb90769bc75d7d9115f1e7d01c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class Callback_ptr>
	:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` Accept(
		:ref:`Socket_listener::Ref<doxid-d4/d3c/classugcs_1_1vsm_1_1_socket__processor_1_1_stream_1a3ac30f4fddc1fb6d3884ec90a1ab4894>` listener,
		Callback_ptr completion_handler,
		:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
		)

Accept incoming TCP/UDP connection.

TCP behavior is similar to accept() call. It returns a connected stream with its own socket.

For UDP this can be called on UDP (master) stream which is bound to specific port via :ref:`Bind_udp() <doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1aa7b29cfca07e08520bde0939ae1d6e09>` call. It will call completion_handler on each packet which has a new peer address:port tuple. All accepted streams share the same udp socket thus closing the the master stream implicitly closes all "accepted" streams. Read on accepted stream will return only packets from one peer. All Packets which do not belong to accepted streams can be read using from the master stream. All UDP streams use circular buffer for received packets. This is to avoid reads on accepted streams blocking on each other.

.. index:: pair: function; Get_addr_info
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a0d6427f6154efe74f06cd5e8503de387:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` Get_addr_info(
		const std::string& host,
		const std::string& service,
		addrinfo* hints,
		:ref:`Get_addr_info_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1a7d14c9d66e0a00ca7244f988b11708fc>` completion_handler,
		:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
		)

Interface for nonblocking call to getaddrinfo().



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- host

		- Hostname to resolve

	*
		- service

		- Service name to resolve. common port name or numerid port as string.

	*
		- hints

		- Passed as hints argument for getaddrinfo() call.

.. index:: pair: function; Bind_udp
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1aa7b29cfca07e08520bde0939ae1d6e09:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` Bind_udp(
		Socket_address::Ptr addr,
		:ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` completion_handler,
		:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(),
		bool multicast = false
		)

create local UDP endpoint socket and associate stream with it.

See Listen_handler for completion handler parameters.

There is no such thing as listen() on udp socket. But we make it possible to create a similar workflow as for tcp. How it works: udp socket is bound on given ip_address:service User can issue Read, Read_from or Write_to on returned stream For simple Write() user must first call Set_peer_address() on stream.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- addr

		- local ip address/port for listener socket. Should be numeric.

	*
		- multicast

		- true : bind as multicast listener. On windows it uses SO_REUSEADDR. On Mac it uses SO_REUSEPORT.

.. index:: pair: function; Bind_can
.. _doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ad83b8d829a52e2a9d2dcef3879c1c4f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` Bind_can(
		std::string interface,
		std::vector<int> filter_messges,
		:ref:`Listen_handler<doxid-d0/d76/classugcs_1_1vsm_1_1_socket__processor_1ae0895c8a2f0c7eafd688b6abedc0c2af>` completion_handler,
		:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` completion_context = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
		)

Create CAN socket and associate stream with it.

For now this is linux-only stuff (via SocketCAN API).

How it works: Socket is bound to a given can interface by name. User can issue Read, Write on returned stream.

Write will accept only valid raw CAN frames with length 16. Caller is responsible of producing a valid frame.

Read will return only valid CAN frames. Caller is responsible of parsing payload data from frame.

Read_from and Write_to are not supported.

See Listen_handler for completion handler parameters.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- interface

		- CAN interface name. Typically "can0" or similar.

	*
		- filter_messges

		- set of can_ids to listen for. Empty means read all.


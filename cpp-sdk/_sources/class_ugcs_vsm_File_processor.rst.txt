.. index:: pair: class; ugcs::vsm::File_processor
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor:

class ugcs::vsm::File_processor
===============================

.. toctree::
	:hidden:

	struct_ugcs_vsm_File_processor_Already_exists_exception_dummy_struct.rst
	struct_ugcs_vsm_File_processor_Exception_dummy_struct.rst
	struct_ugcs_vsm_File_processor_Not_found_exception_dummy_struct.rst
	struct_ugcs_vsm_File_processor_Permission_denied_exception_dummy_struct.rst
	class_ugcs_vsm_File_processor_Native_controller.rst
	class_ugcs_vsm_File_processor_Stream.rst

Overview
~~~~~~~~

Processor for working with filesystem I/O. :ref:`More...<details-d9/dc7/classugcs_1_1vsm_1_1_file__processor>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <file_processor.h>
	
	class File_processor: public :ref:`ugcs::vsm::Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`
	{
	public:
		// typedefs
	
		typedef std::shared_ptr<File_processor> :ref:`Ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73>`;
		typedef std::weak_ptr<File_processor> :ref:`Weak_ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a56641511d539e722dd73fd14e7dd39e0>`;
		typedef :ref:`ugcs::vsm::Param_exception<doxid-d4/dff/classugcs_1_1vsm_1_1_param__exception>`<:ref:`Exception_dummy_struct<doxid-d0/df1/structugcs_1_1vsm_1_1_file__processor_1_1_exception__dummy__struct>`,> :target:`Exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a358683231ce28614dbb741156b8f9a5d>`;
		typedef :ref:`ugcs::vsm::Derived_exception<doxid-dd/dbf/classugcs_1_1vsm_1_1_derived__exception>`<:ref:`Exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a358683231ce28614dbb741156b8f9a5d>`, :ref:`Not_found_exception_dummy_struct<doxid-da/d1d/structugcs_1_1vsm_1_1_file__processor_1_1_not__found__exception__dummy__struct>`> :ref:`Not_found_exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a5a0cbf6aa8c05e9b7e9b17ecf2f12ed0>`;
		typedef :ref:`ugcs::vsm::Derived_exception<doxid-dd/dbf/classugcs_1_1vsm_1_1_derived__exception>`<:ref:`Exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a358683231ce28614dbb741156b8f9a5d>`, :ref:`Permission_denied_exception_dummy_struct<doxid-d4/d1d/structugcs_1_1vsm_1_1_file__processor_1_1_permission__denied__exception__dummy__struct>`> :ref:`Permission_denied_exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a1f0c192f7254aefda8fccbb62c7db4c6>`;
		typedef :ref:`ugcs::vsm::Derived_exception<doxid-dd/dbf/classugcs_1_1vsm_1_1_derived__exception>`<:ref:`Exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a358683231ce28614dbb741156b8f9a5d>`, :ref:`Already_exists_exception_dummy_struct<doxid-db/d0d/structugcs_1_1vsm_1_1_file__processor_1_1_already__exists__exception__dummy__struct>`> :ref:`Already_exists_exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a9453f44f5dc01a95f9f64b471fa3b328>`;

		// structs
	
		struct :ref:`Already_exists_exception_dummy_struct<doxid-db/d0d/structugcs_1_1vsm_1_1_file__processor_1_1_already__exists__exception__dummy__struct>`;
		struct :ref:`Exception_dummy_struct<doxid-d0/df1/structugcs_1_1vsm_1_1_file__processor_1_1_exception__dummy__struct>`;
		struct :ref:`Not_found_exception_dummy_struct<doxid-da/d1d/structugcs_1_1vsm_1_1_file__processor_1_1_not__found__exception__dummy__struct>`;
		struct :ref:`Permission_denied_exception_dummy_struct<doxid-d4/d1d/structugcs_1_1vsm_1_1_file__processor_1_1_permission__denied__exception__dummy__struct>`;

		// classes
	
		class :ref:`Native_controller<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller>`;
		class :ref:`Stream<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream>`;

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73>` :ref:`Create<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a0c1ad4b0e660cc067457b81268ad455a>`(Args&&... args);
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73>` :ref:`Get_instance<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a75e498bb9c7aad1307b300fa0c016fb5>`(Args&&... args);
	
		static FILE* :ref:`Fopen_utf8<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a29146d31e1f32941a2b9a433336059aa>`(const std::string& name, const std::string& mode);
		static bool :ref:`Rename_utf8<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a8894c608986a45fb41e2ac4841902824>`(const std::string& old_name, const std::string& new_name);
		static bool :ref:`Remove_utf8<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a0ef9d594554d0168088b0e4d1a53ada2>`(const std::string& name);
		static int :ref:`Access_utf8<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a900799285d624e8438e763827e37fc51>`(const std::string& name, int mode);
		:ref:`Stream::Ref<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1afc1535e77a3298f3b6181f07a5d5862a>` :ref:`Open<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a47084d1ff954826ba5e48901bab4d51d>`(const std::string& name, const std::string& mode, bool maintain_pos = true);
	};

	// direct descendants

	class :ref:`Serial_processor<doxid-dc/dc8/classugcs_1_1vsm_1_1_serial__processor>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		typedef std::shared_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>`;
		typedef std::weak_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Weak_ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a77243b55b39633082db0c3728a8a85b0>`;
		typedef std::shared_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>`;
		typedef std::weak_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Weak_ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1adbab27f2c1072dce5c5c2486ee9ecb07>`;

		// enums
	
		enum :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>`;

		// classes
	
		class :ref:`Request<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request>`;
		class :ref:`Request_waiter<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter>`;

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ad29f54929b9e5f8645ec52a1e45adb12>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a0d3beca821012a86a256c28e7dfc4fde>`() const;
		bool :ref:`Check_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ac38d8f9f00ad0a9d4b449dff33b0cdab>`(:ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` mask);
		void :ref:`Submit_request<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aeee82d0de5351f069e41e3317a3f5ba8>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request);
		void :ref:`Submit_request_locked<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a6aae7a556f97447859ea1cd406ca90f1>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request, :ref:`Request_waiter::Locker<doxid-dc/d0c/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1_1_locker>` locker);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a580718bc6c93f68817a75779c269c7c0>`(int requests_limit = 0);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a9101999857946b533c5473db74995dcb>`(std::unique_lock<std::mutex>& lock, int requests_limit = 0);
		void :ref:`Set_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ae5bc52cbb72f4009abbdb749c84ea9d8>`(:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter);
		:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` :ref:`Get_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a97a3a455484bfd258139f1d9b69ea0c8>`() const;
		const std::string& :ref:`Get_name<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ab9745410bec2e31145de2ad61aec1038>`();
		void :ref:`Enable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aad7864e6f1e03e84d869cbca8dc3df06>`();
		void :ref:`Disable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aa68b072400c148d77a5fab4529e68d8e>`();
		bool :ref:`Is_enabled<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a787201d195b1038a816d4c81785f2765>`() const;
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1aa503edaf7008fa1a923113518e074018>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a93add2d34731e5e8a0450e555fac5479>`() const;
		:ref:`Request_container<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a6f987fcab9f10ab1812601dbad9316e3>`(const std::string& name, :ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter = :ref:`Request_waiter::Create<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a091f8971c953ca128e84d91567b00b52>`());

.. _details-d9/dc7/classugcs_1_1vsm_1_1_file__processor:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Processor for working with filesystem I/O.

It is mostly intended for working with special files such as mapped devices in asynchronous mode. It is not so useful for regular files so the user code can use <cstdio> functions for them (unless it does not need asynchronous file operations). Keep in mind that this processor provides asynchronous I/O but not concurrent. All operations for each stream are serialized and never executed in parallel. In case the client code issues concurrent requests it should be aware that file position can be unpredictably updated unless it is explicitly specified.

Typedefs
--------

.. index:: pair: typedef; Ptr
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::shared_ptr<File_processor> Ptr

Pointer type.

.. index:: pair: typedef; Weak_ptr
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a56641511d539e722dd73fd14e7dd39e0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::weak_ptr<File_processor> Weak_ptr

Pointer type.

.. index:: pair: typedef; Not_found_exception
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a5a0cbf6aa8c05e9b7e9b17ecf2f12ed0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`ugcs::vsm::Derived_exception<doxid-dd/dbf/classugcs_1_1vsm_1_1_derived__exception>`<:ref:`Exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a358683231ce28614dbb741156b8f9a5d>`, :ref:`Not_found_exception_dummy_struct<doxid-da/d1d/structugcs_1_1vsm_1_1_file__processor_1_1_not__found__exception__dummy__struct>`> Not_found_exception

Definition of a new exception type.

.. index:: pair: typedef; Permission_denied_exception
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a1f0c192f7254aefda8fccbb62c7db4c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`ugcs::vsm::Derived_exception<doxid-dd/dbf/classugcs_1_1vsm_1_1_derived__exception>`<:ref:`Exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a358683231ce28614dbb741156b8f9a5d>`, :ref:`Permission_denied_exception_dummy_struct<doxid-d4/d1d/structugcs_1_1vsm_1_1_file__processor_1_1_permission__denied__exception__dummy__struct>`> Permission_denied_exception

Definition of a new exception type.

.. index:: pair: typedef; Already_exists_exception
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a9453f44f5dc01a95f9f64b471fa3b328:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`ugcs::vsm::Derived_exception<doxid-dd/dbf/classugcs_1_1vsm_1_1_derived__exception>`<:ref:`Exception<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a358683231ce28614dbb741156b8f9a5d>`, :ref:`Already_exists_exception_dummy_struct<doxid-db/d0d/structugcs_1_1vsm_1_1_file__processor_1_1_already__exists__exception__dummy__struct>`> Already_exists_exception

Definition of a new exception type.

Methods
-------

.. index:: pair: function; Create
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a0c1ad4b0e660cc067457b81268ad455a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73>` Create(Args&&... args)

Create an instance.

.. index:: pair: function; Get_instance
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a75e498bb9c7aad1307b300fa0c016fb5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73>` Get_instance(Args&&... args)

Get global or create new processor instance.

.. index:: pair: function; Fopen_utf8
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a29146d31e1f32941a2b9a433336059aa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static FILE* Fopen_utf8(const std::string& name, const std::string& mode)

Platform independent method for opening a standard library file handle providing an UTF-8 encoded path and mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- name

		- UTF-8 encoded file path to open.

	*
		- mode

		- UTF-8 encoded access mode, see standard fopen() method.



.. rubric:: Returns:

Valid file handle on success, or nullptr on failure.

.. index:: pair: function; Rename_utf8
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a8894c608986a45fb41e2ac4841902824:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static bool Rename_utf8(
		const std::string& old_name,
		const std::string& new_name
		)

Platform independent method for renaming a file providing UTF-8 encoded paths.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- old_name

		- UTF-8 encoded old file name.

	*
		- new_name

		- UTF-8 encoded new file name;



.. rubric:: Returns:

true on success, false on failure.

.. index:: pair: function; Remove_utf8
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a0ef9d594554d0168088b0e4d1a53ada2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static bool Remove_utf8(const std::string& name)

Platform independent method for removing a file providing UTF-8 encoded path.

.. index:: pair: function; Access_utf8
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a900799285d624e8438e763827e37fc51:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static int Access_utf8(const std::string& name, int mode)

Platform independent method for checking file access permission providing UTF-8 file name.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- name

		- UTF-8 encoded file name.

	*
		- mode

		- Mode as in standard access() method.



.. rubric:: Returns:

As in standard access() method.

.. index:: pair: function; Open
.. _doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a47084d1ff954826ba5e48901bab4d51d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Stream::Ref<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1afc1535e77a3298f3b6181f07a5d5862a>` Open(
		const std::string& name,
		const std::string& mode,
		bool maintain_pos = true
		)

Open file.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- name

		- File path.

	*
		- mode

		- Opening mode similar to the corresponding argument for fopen() function. It supports "x" specifier and do not support "a" and "b" specifiers. All files are opened in binary mode. NOTE: In addition "rx" combination is supported and means create file in read-only mode if it does not exist.

	*
		- maintain_pos

		- Indicates whether file position maintenance is required. It should be "false" for devices which do not support seeking. In this case file offset for all I/O operations will be set to zero. In case it is "true" the returned file stream will maintain current position accordingly to the number of bytes read or written.

	*
		- Invalid_param_exception

		- if mode string is not valid.

	*
		- Not_found_exception

		- if the specified path does not exist when it must exist based on provided opening mode.

	*
		- Permission_denied_exception

		- if there is insufficient permissions for file creation.

	*
		- Already_exists_exception

		- if new file creation requested ('x' specified in opening mode) but the file already exists.

	*
		- :ref:`Exception <doxid-de/de2/classugcs_1_1vsm_1_1_exception>`

		- in case of any other error returned by platform.



.. rubric:: Returns:

Created file stream.


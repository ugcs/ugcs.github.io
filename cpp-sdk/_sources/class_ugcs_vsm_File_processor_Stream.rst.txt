.. index:: pair: class; ugcs::vsm::File_processor::Stream
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream:

class ugcs::vsm::File_processor::Stream
=======================================

.. toctree::
	:hidden:

	enum_ugcs_vsm_File_processor_Stream_Lock_result.rst
	struct_ugcs_vsm_File_processor_Stream_Lock_cb.rst
	class_ugcs_vsm_File_processor_Stream_Mode.rst
	class_ugcs_vsm_File_processor_Stream_Native_handle.rst

Overview
~~~~~~~~

:ref:`Stream <doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream>` class which represents opened file. :ref:`More...<details-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <file_processor.h>
	
	class Stream: public :ref:`ugcs::vsm::Io_stream<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream>`
	{
	public:
		// typedefs
	
		typedef std::shared_ptr<Stream> :ref:`Ptr<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a1ded5e2b5857bbb1b626998818eb47a0>`;
		typedef std::weak_ptr<Stream> :ref:`Weak_ptr<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1ae11cb95b8d6dd43b37c42246318b331b>`;
		typedef :ref:`Reference_guard<doxid-d2/d2c/classugcs_1_1vsm_1_1_reference__guard>`<:ref:`Stream::Ptr<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a1ded5e2b5857bbb1b626998818eb47a0>`> :ref:`Ref<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1afc1535e77a3298f3b6181f07a5d5862a>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> :ref:`Lock_handler<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a6242dd592dfa1baa8d3087d6e6f7998d>`;

		// enums
	
		enum :ref:`Lock_result<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a21004f3744b2bf1a3aaeaca2632489d3>`;

		// structs
	
		struct :ref:`Lock_cb<doxid-de/d33/structugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_lock__cb>`;

		// classes
	
		class :ref:`Mode<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode>`;
		class :ref:`Native_handle<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle>`;

		// construction
	
		:ref:`Stream<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1aa68c75fde6939490f1fab0881d9992c9>`(
			:ref:`File_processor::Ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73>` processor,
			const std::string& path,
			:ref:`Mode<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode>` mode,
			bool maintain_pos,
			:ref:`Native_handle::Unique_ptr<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle_1a2de77c6c5a0cf7fbcbeb655f5577acd6>`&& native_handle
			);

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a1ded5e2b5857bbb1b626998818eb47a0>` :ref:`Create<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1ae6072bea734b89f1b282aeeac2c62aca>`(Args&&... args);
	
		:ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` :ref:`Get_current_pos<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a42cdc2970bad8d31d011d8d02d682a8d>`() const;
		:ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` :ref:`Seek<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a81e866f20d0ccd1c6496931e9dd2fa4e>`(:ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` pos, bool is_relative = false);
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Lock<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a4569c55606a32b9c04dd563e4e0b3fda>`(:ref:`Lock_handler<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a6242dd592dfa1baa8d3087d6e6f7998d>` completion_handler, :ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(), bool lock = true);
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Unlock<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a2ec2781d9ecf3ec1892b8163f19ab268>`(:ref:`Lock_handler<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a6242dd592dfa1baa8d3087d6e6f7998d>` completion_handler = :ref:`Make_dummy_callback<doxid-dd/def/namespaceugcs_1_1vsm_1a4547da35caea4932ca2dfbc7e6ae5fb4>`<void, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`>(), :ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`());
	};

	// direct descendants

	class :ref:`Stream<doxid-d1/dde/classugcs_1_1vsm_1_1_serial__processor_1_1_stream>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		typedef std::shared_ptr<:ref:`Io_stream<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream>`> :ref:`Ptr<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1adb1bb7a5387d65f5cd701bf65705c966>`;
		typedef std::weak_ptr<:ref:`Io_stream<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream>`> :ref:`Weak_ptr<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1aead2850047ad407e02e6b388fb1d74bc>`;
		typedef :ref:`Reference_guard<doxid-d2/d2c/classugcs_1_1vsm_1_1_reference__guard>`<:ref:`Io_stream::Ptr<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1adb1bb7a5387d65f5cd701bf65705c966>`> :ref:`Ref<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a534252726a25aeb3c0598f7d9a80a0a1>`;
		typedef int64_t :ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> :ref:`Write_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a6853ca850b7f78f7e4bd28cc0c991850>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, :ref:`Io_buffer::Ptr<doxid-d1/d0f/classugcs_1_1vsm_1_1_io__buffer_1a538a51ee0b037d1ebc88b5d25dfac361>`, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> :ref:`Read_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a0807cf8bf8fe3d009d1d00c872d76531>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void> :ref:`Close_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1af75df5614ea608c625760ecb1f4b6531>`;

		// enums
	
		enum :ref:`State<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1ab24797305a121874a41b8f4f8420e053>`;
		enum :ref:`Type<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0b>`;

		// fields
	
		static const :ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` :ref:`OFFSET_NONE<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a50c5048c33356dbca76feed7e50e9cc3>`;
		static const :ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` :ref:`OFFSET_END<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1adbd879429e07a03fb271dea51f0b4149>`;

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1adb1bb7a5387d65f5cd701bf65705c966>` :ref:`Create<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1aa33997d1fd85028ec8f48bc98f256deb>`(Args&&... args);
	
		static const char* :ref:`Io_result_as_char<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a257a8dae7a29d823813503d92fa4844c>`(const :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>` res);
		void :ref:`Add_ref<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1add696832c265134f895704fbc980aed6>`();
		void :ref:`Release_ref<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a0be5868ee613163912be2dbe657885e4>`();
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Write<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a1da8e87e4e77334481c273bc5787c2dc>`(:ref:`Io_buffer::Ptr<doxid-d1/d0f/classugcs_1_1vsm_1_1_io__buffer_1a538a51ee0b037d1ebc88b5d25dfac361>` buffer, :ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` offset, :ref:`Write_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a6853ca850b7f78f7e4bd28cc0c991850>` completion_handler = :ref:`Make_dummy_callback<doxid-dd/def/namespaceugcs_1_1vsm_1a4547da35caea4932ca2dfbc7e6ae5fb4>`<void, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`>(), :ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`());
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Write<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1abe77ea76fbda5c6e6817ca2f254786fe>`(:ref:`Io_buffer::Ptr<doxid-d1/d0f/classugcs_1_1vsm_1_1_io__buffer_1a538a51ee0b037d1ebc88b5d25dfac361>` buffer, :ref:`Write_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a6853ca850b7f78f7e4bd28cc0c991850>` completion_handler = :ref:`Make_dummy_callback<doxid-dd/def/namespaceugcs_1_1vsm_1a4547da35caea4932ca2dfbc7e6ae5fb4>`<void, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`>(), :ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`());
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Read<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a394d6ff64258f2e1a2bee4b820f0dfe6>`(
			size_t max_to_read,
			size_t min_to_read,
			:ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` offset,
			:ref:`Read_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a0807cf8bf8fe3d009d1d00c872d76531>` completion_handler = :ref:`Make_dummy_callback<doxid-dd/def/namespaceugcs_1_1vsm_1a4547da35caea4932ca2dfbc7e6ae5fb4>`<void, :ref:`Io_buffer::Ptr<doxid-d1/d0f/classugcs_1_1vsm_1_1_io__buffer_1a538a51ee0b037d1ebc88b5d25dfac361>`, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`>(),
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Read<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a513c7643ad813297b3761c93f0ec950c>`(
			size_t max_to_read,
			size_t min_to_read = 1,
			:ref:`Read_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a0807cf8bf8fe3d009d1d00c872d76531>` completion_handler = :ref:`Make_dummy_callback<doxid-dd/def/namespaceugcs_1_1vsm_1a4547da35caea4932ca2dfbc7e6ae5fb4>`<void, :ref:`Io_buffer::Ptr<doxid-d1/d0f/classugcs_1_1vsm_1_1_io__buffer_1a538a51ee0b037d1ebc88b5d25dfac361>`, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`>(),
			:ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`()
			);
	
		:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` :ref:`Close<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a99e1e6b6ced4b5e30d509631fbcd879a>`(:ref:`Close_handler<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1af75df5614ea608c625760ecb1f4b6531>` completion_handler = :ref:`Make_dummy_callback<doxid-dd/def/namespaceugcs_1_1vsm_1a4547da35caea4932ca2dfbc7e6ae5fb4>`<void>(), :ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`());
		:ref:`State<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1ab24797305a121874a41b8f4f8420e053>` :ref:`Get_state<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a36032e57353b9c16eab2c9b4114a7c9f>`() const;
		bool :ref:`Is_closed<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a9978a75e949f05b0bcffb733f424b262>`() const;
		std::string :ref:`Get_name<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a4fb2c70c7c8764aa1a99b14116c9f5e5>`() const;
		:ref:`Type<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a924a1e691d3c068343b0d148fcc8db0b>` :ref:`Get_type<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1abd3a6e63fc149cd8500d9e0a82770a54>`() const;

.. _details-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`Stream <doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream>` class which represents opened file.

Typedefs
--------

.. index:: pair: typedef; Ptr
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a1ded5e2b5857bbb1b626998818eb47a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::shared_ptr<Stream> Ptr

Pointer type.

.. index:: pair: typedef; Weak_ptr
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1ae11cb95b8d6dd43b37c42246318b331b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::weak_ptr<Stream> Weak_ptr

Pointer type.

.. index:: pair: typedef; Ref
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1afc1535e77a3298f3b6181f07a5d5862a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Reference_guard<doxid-d2/d2c/classugcs_1_1vsm_1_1_reference__guard>`<:ref:`Stream::Ptr<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a1ded5e2b5857bbb1b626998818eb47a0>`> Ref

Reference type.

.. index:: pair: typedef; Lock_handler
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a6242dd592dfa1baa8d3087d6e6f7998d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`> Lock_handler

Default prototype for lock operation completion handler.

Construction
------------

.. index:: pair: function; Stream
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1aa68c75fde6939490f1fab0881d9992c9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Stream(
		:ref:`File_processor::Ptr<doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a4c9978888643e693d235cce357e75c73>` processor,
		const std::string& path,
		:ref:`Mode<doxid-de/d57/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_mode>` mode,
		bool maintain_pos,
		:ref:`Native_handle::Unique_ptr<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle_1a2de77c6c5a0cf7fbcbeb655f5577acd6>`&& native_handle
		)

Construct file stream.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- processor

		- Associated processor instance.

	*
		- path

		- File path.

	*
		- mode

		- Parsed file opening mode.

	*
		- maintain_pos

		- Indicates whether file position maintenance is required. See :ref:`File_processor::Open <doxid-d9/dc7/classugcs_1_1vsm_1_1_file__processor_1a47084d1ff954826ba5e48901bab4d51d>`.

	*
		- native_handle

		- Native handle to be used for stream operations.

Methods
-------

.. index:: pair: function; Create
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1ae6072bea734b89f1b282aeeac2c62aca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a1ded5e2b5857bbb1b626998818eb47a0>` Create(Args&&... args)

Create an instance.

.. index:: pair: function; Get_current_pos
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a42cdc2970bad8d31d011d8d02d682a8d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` Get_current_pos() const

Get current position in the stream.

This method has meaning only file position is maintained by the stream.



.. rubric:: Returns:

Current position in the stream.

.. index:: pair: function; Seek
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a81e866f20d0ccd1c6496931e9dd2fa4e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` Seek(:ref:`Offset<doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a30574fccaad9e587c15270e3fa3d5925>` pos, bool is_relative = false)

Set new current position for the stream.

In case the stream does not maintain the current position, this operation does nothing. Be aware that seeking result is undefined if read or write operation is in progress.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pos

		- New current position value.

	*
		- is_relative

		- Indicates that position is set relatively to the current position value.

	*
		- Invalid_param_exception

		- if the resulted position is invalid (e.g. negative).



.. rubric:: Returns:

New absolute current position value.

.. index:: pair: function; Lock
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a4569c55606a32b9c04dd563e4e0b3fda:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` Lock(:ref:`Lock_handler<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a6242dd592dfa1baa8d3087d6e6f7998d>` completion_handler, :ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`(), bool lock = true)

Put an exclusive lock on file.

On Windows it's mandatory lock on first byte of file implemented via LockFileEx() call. On Linux it's advisory lock implemented via flock() call. File can be unlocked via :ref:`Unlock() <doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a2ec2781d9ecf3ec1892b8163f19ab268>` call or via :ref:`Close() <doxid-d7/dc6/classugcs_1_1vsm_1_1_io__stream_1a99e1e6b6ced4b5e30d509631fbcd879a>`.

NOTE: No double lock supported: :ref:`Stream <doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream>` can be locked again only after successful :ref:`Unlock() <doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a2ec2781d9ecf3ec1892b8163f19ab268>` operation. I.e. subsequent Lock on the same stream will fail until :ref:`Unlock() <doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a2ec2781d9ecf3ec1892b8163f19ab268>` is called and unlock completion is delivered.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- completion_handler

		- User specified completion handler.

	*
		- comp_ctx

		- User specified completion context.

	*
		- lock

		- true: lock operation, false: unlock operation.



.. rubric:: Returns:

:ref:`Operation_waiter <doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` which can be used to wait, or set timeout or cancel for pending lock operation.

.. index:: pair: function; Unlock
.. _doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a2ec2781d9ecf3ec1892b8163f19ab268:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Operation_waiter<doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` Unlock(:ref:`Lock_handler<doxid-dd/dfd/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1a6242dd592dfa1baa8d3087d6e6f7998d>` completion_handler = :ref:`Make_dummy_callback<doxid-dd/def/namespaceugcs_1_1vsm_1a4547da35caea4932ca2dfbc7e6ae5fb4>`<void, :ref:`Io_result<doxid-dd/def/namespaceugcs_1_1vsm_1a0e37a17f83be9c1d2f04595f500a5712>`>(), :ref:`Request_completion_context::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = :ref:`Request_temp_completion_context::Create<doxid-de/d3a/classugcs_1_1vsm_1_1_request__temp__completion__context_1a8c8c67d2b8325daaa6f55e6cca470b79>`())

Remove lock from file.

On Windows it unlocks on first byte of file implemented via UnlockFile() call. On Linux it is implemented via flock() call.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- completion_handler

		- User specified completion handler.

	*
		- comp_ctx

		- User specified completion context.



.. rubric:: Returns:

:ref:`Operation_waiter <doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>` which can be used to wait for pending unlock operation to complete.


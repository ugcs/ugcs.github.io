.. index:: pair: class; ugcs::vsm::Timer_processor
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor:

class ugcs::vsm::Timer_processor
================================

.. toctree::
	:hidden:

	class_ugcs_vsm_Timer_processor_Timer.rst

Overview
~~~~~~~~

:ref:`Timer <doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer>` processor manages all timers in the VSM. :ref:`More...<details-dc/dae/classugcs_1_1vsm_1_1_timer__processor>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <timer_processor.h>
	
	class Timer_processor: public :ref:`ugcs::vsm::Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`
	{
	public:
		// typedefs
	
		typedef std::shared_ptr<Timer_processor> :ref:`Ptr<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a9246bf3067073900f699cde33526dee7>`;
		typedef std::weak_ptr<Timer_processor> :ref:`Weak_ptr<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1ad7229fcc51a0cbbd07abc3174d5b2f79>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<bool> :ref:`Handler<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1abee38014c81c474b8551afc7d8837266>`;

		// classes
	
		class :ref:`Timer<doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer>`;

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a00473b49337926a9d236f9642f209b38>`(Args&&... args);
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Get_instance<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a19a7b34dd02aba6468e644d1c91026aa>`(Args&&... args);
	
		:ref:`Timer::Ptr<doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer_1a6de713d04a33015ffae93d34bc12c793>` :ref:`Create_timer<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1aa3c128f1ffd06a583d849bf1e60dc077>`(std::chrono::milliseconds interval, const :ref:`Handler<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1abee38014c81c474b8551afc7d8837266>`& handler, :ref:`Request_container::Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` container);
		void :ref:`Cancel_timer<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a6f631d012447af8263a0a4ca6389a5f4>`(:ref:`Timer::Ptr<doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer_1a6de713d04a33015ffae93d34bc12c793>` timer);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		typedef std::shared_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>`;
		typedef std::weak_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Weak_ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a77243b55b39633082db0c3728a8a85b0>`;
		typedef std::shared_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>`;
		typedef std::weak_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Weak_ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1adbab27f2c1072dce5c5c2486ee9ecb07>`;

		// enums
	
		enum :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>`;

		// classes
	
		class :ref:`Request<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request>`;
		class :ref:`Request_waiter<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter>`;

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ad29f54929b9e5f8645ec52a1e45adb12>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a0d3beca821012a86a256c28e7dfc4fde>`() const;
		bool :ref:`Check_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ac38d8f9f00ad0a9d4b449dff33b0cdab>`(:ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` mask);
		void :ref:`Submit_request<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aeee82d0de5351f069e41e3317a3f5ba8>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request);
		void :ref:`Submit_request_locked<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a6aae7a556f97447859ea1cd406ca90f1>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request, :ref:`Request_waiter::Locker<doxid-dc/d0c/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1_1_locker>` locker);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a580718bc6c93f68817a75779c269c7c0>`(int requests_limit = 0);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a9101999857946b533c5473db74995dcb>`(std::unique_lock<std::mutex>& lock, int requests_limit = 0);
		void :ref:`Set_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ae5bc52cbb72f4009abbdb749c84ea9d8>`(:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter);
		:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` :ref:`Get_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a97a3a455484bfd258139f1d9b69ea0c8>`() const;
		const std::string& :ref:`Get_name<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ab9745410bec2e31145de2ad61aec1038>`();
		void :ref:`Enable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aad7864e6f1e03e84d869cbca8dc3df06>`();
		void :ref:`Disable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aa68b072400c148d77a5fab4529e68d8e>`();
		bool :ref:`Is_enabled<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a787201d195b1038a816d4c81785f2765>`() const;
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1aa503edaf7008fa1a923113518e074018>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a93add2d34731e5e8a0450e555fac5479>`() const;
		:ref:`Request_container<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a6f987fcab9f10ab1812601dbad9316e3>`(const std::string& name, :ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter = :ref:`Request_waiter::Create<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a091f8971c953ca128e84d91567b00b52>`());

.. _details-dc/dae/classugcs_1_1vsm_1_1_timer__processor:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`Timer <doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer>` processor manages all timers in the VSM.

Typedefs
--------

.. index:: pair: typedef; Ptr
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a9246bf3067073900f699cde33526dee7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::shared_ptr<Timer_processor> Ptr

Pointer type.

.. index:: pair: typedef; Weak_ptr
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1ad7229fcc51a0cbbd07abc3174d5b2f79:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::weak_ptr<Timer_processor> Weak_ptr

Pointer type.

.. index:: pair: typedef; Handler
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1abee38014c81c474b8551afc7d8837266:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<bool> Handler

:ref:`Timer <doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer>` handler.

It should return boolean value with the following meanings: false - stop the timer, i.e. do not perform further invocations; true - re-schedule next invocation after the initial interval.

Methods
-------

.. index:: pair: function; Create
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a00473b49337926a9d236f9642f209b38:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` Create(Args&&... args)

Create an instance.

.. index:: pair: function; Get_instance
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a19a7b34dd02aba6468e644d1c91026aa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` Get_instance(Args&&... args)

Get global or create new processor instance.

.. index:: pair: function; Create_timer
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1aa3c128f1ffd06a583d849bf1e60dc077:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Timer::Ptr<doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer_1a6de713d04a33015ffae93d34bc12c793>` Create_timer(std::chrono::milliseconds interval, const :ref:`Handler<doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1abee38014c81c474b8551afc7d8837266>`& handler, :ref:`Request_container::Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` container)

Create and schedule the timer instance.

First time it is fired after the specified interval (since the creation moment). Is it periodic or one-shot is defined by the provided handler - while it is returning "true" the timer is re-scheduled with the same interval.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- interval

		- :ref:`Timer <doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer>` interval.

	*
		- handler

		- Handler to invoke, should be non-empty. See :ref:`Handler <doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1abee38014c81c474b8551afc7d8837266>`.

	*
		- container

		- Container where the handler will be executed.

	*
		- Invalid_param_exception

		- if Handler or container is not set.



.. rubric:: Returns:

:ref:`Timer <doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer>` object which can be used, for example, to cancel running timer.

.. index:: pair: function; Cancel_timer
.. _doxid-dc/dae/classugcs_1_1vsm_1_1_timer__processor_1a6f631d012447af8263a0a4ca6389a5f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Cancel_timer(:ref:`Timer::Ptr<doxid-d9/df5/classugcs_1_1vsm_1_1_timer__processor_1_1_timer_1a6de713d04a33015ffae93d34bc12c793>` timer)

Cancel the specified timer in case it is running.


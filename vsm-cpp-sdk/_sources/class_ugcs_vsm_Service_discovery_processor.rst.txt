.. index:: pair: class; ugcs::vsm::Service_discovery_processor
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor:

class ugcs::vsm::Service_discovery_processor
============================================

.. toctree::
	:hidden:

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <service_discovery_processor.h>
	
	class Service_discovery_processor: public :ref:`ugcs::vsm::Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`
	{
	public:
		// typedefs
	
		typedef std::shared_ptr<Service_discovery_processor> :ref:`Ptr<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1afd400107c8876d62fbaacdfd555008e3>`;
		typedef std::weak_ptr<Service_discovery_processor> :ref:`Weak_ptr<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aef299242aadfadeb1db1f904dabaa558>`;
		typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, std::string, std::string, std::string, std::string, bool> :ref:`Detection_handler<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1ae8a986f070fe12613d3c6202f4898002>`;

		// construction
	
		:target:`Service_discovery_processor<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1ae7508d192e846b7a9acf2683c9aede30>`(Socket_address::Ptr muticast_adress = Socket_address::Create(DEFAULT_DISCOVERY_ADDRESS, DEFAULT_DISCOVERY_PORT));

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a1a93b051bddcabc2d3182d971cd7fa04>`(Args&&... args);
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Get_instance<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a4b1e8a2ebddc4aa9d9d225216d4431c2>`(Args&&... args);
	
		template <class __Callable, typename... __Args>
		:ref:`__DEFINE_CALLBACK_BUILDER_BODY<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa74fcb8e05e681318ab12d894f2e2593>`(
			Make_detection_handler,
			(std::string, std::string, std::string, std::string, bool),
			("", "", "", "", true)
			);
	
		void :ref:`Advertise_service<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a625cb3d26f5fb4ca6e40d56d3601283f>`(
			const std::string& type,
			const std::string& name,
			const std::string& location
			);
	
		void :ref:`Unadvertise_service<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a2809577621a88a79c0de665e80ec7b5e>`(
			const std::string& type,
			const std::string& name,
			const std::string& location
			);
	
		void :ref:`Subscribe_for_service<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa92b1d285b5e15c5522f369d56ef7004>`(const std::string& type, :ref:`Detection_handler<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1ae8a986f070fe12613d3c6202f4898002>` handler, :ref:`Request_processor::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` context);
		void :ref:`Search_for_service<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a8d1a6c0e6b5ec34b65acab60f92d016a>`(const std::string& type);
		void :ref:`Unsubscribe_from_service<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa110e572a49040805e17f387bc085c24>`(const std::string& type);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		typedef std::shared_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>`;
		typedef std::weak_ptr<:ref:`Request_container<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container>`> :ref:`Weak_ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a77243b55b39633082db0c3728a8a85b0>`;
		typedef std::shared_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>`;
		typedef std::weak_ptr<:ref:`Request_context<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`> :ref:`Weak_ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1adbab27f2c1072dce5c5c2486ee9ecb07>`;

		// enums
	
		enum :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>`;

		// classes
	
		class :ref:`Request<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request>`;
		class :ref:`Request_waiter<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter>`;

		// methods
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ad29f54929b9e5f8645ec52a1e45adb12>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a0d3beca821012a86a256c28e7dfc4fde>`() const;
		bool :ref:`Check_type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ac38d8f9f00ad0a9d4b449dff33b0cdab>`(:ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` mask);
		void :ref:`Submit_request<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aeee82d0de5351f069e41e3317a3f5ba8>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request);
		void :ref:`Submit_request_locked<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a6aae7a556f97447859ea1cd406ca90f1>`(:ref:`Request::Ptr<doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request, :ref:`Request_waiter::Locker<doxid-dc/d0c/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1_1_locker>` locker);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a580718bc6c93f68817a75779c269c7c0>`(int requests_limit = 0);
		int :ref:`Process_requests<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a9101999857946b533c5473db74995dcb>`(std::unique_lock<std::mutex>& lock, int requests_limit = 0);
		void :ref:`Set_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ae5bc52cbb72f4009abbdb749c84ea9d8>`(:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter);
		:ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` :ref:`Get_waiter<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a97a3a455484bfd258139f1d9b69ea0c8>`() const;
		const std::string& :ref:`Get_name<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1ab9745410bec2e31145de2ad61aec1038>`();
		void :ref:`Enable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aad7864e6f1e03e84d869cbca8dc3df06>`();
		void :ref:`Disable<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1aa68b072400c148d77a5fab4529e68d8e>`();
		bool :ref:`Is_enabled<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a787201d195b1038a816d4c81785f2765>`() const;
	
		template <typename... Args>
		static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` :ref:`Create<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1aa503edaf7008fa1a923113518e074018>`(Args&&... args);
	
		virtual :ref:`Type<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a280c53ec8f1a1aa04116d4b84d30c1ab>` :ref:`Get_type<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a93add2d34731e5e8a0450e555fac5479>`() const;
		:ref:`Request_container<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a6f987fcab9f10ab1812601dbad9316e3>`(const std::string& name, :ref:`Request_waiter::Ptr<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter = :ref:`Request_waiter::Create<doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a091f8971c953ca128e84d91567b00b52>`());

.. _details-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Typedefs
--------

.. index:: pair: typedef; Ptr
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1afd400107c8876d62fbaacdfd555008e3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::shared_ptr<Service_discovery_processor> Ptr

Pointer type.

.. index:: pair: typedef; Weak_ptr
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aef299242aadfadeb1db1f904dabaa558:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef std::weak_ptr<Service_discovery_processor> Weak_ptr

Pointer type.

.. index:: pair: typedef; Detection_handler
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1ae8a986f070fe12613d3c6202f4898002:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`Callback_proxy<doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>`<void, std::string, std::string, std::string, std::string, bool> Detection_handler

Detector function.

User must supply this function via :ref:`Subscribe_for_service() <doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa92b1d285b5e15c5522f369d56ef7004>` call. It should follow the signature:

void Handler(string type, string name, string location, string instance_id, bool alive)

Handler parameters: The Handler will get invoked when NOTIFY or M-SEARCH response is received for given service type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- type

		- service type

	*
		- name

		- service name

	*
		- location

		- location uri

	*
		- instance_id

		- random (unique) string which can be used to distinguish services with equal names to prevent multiple connections to the same service via multiple locations.

	*
		- alive

		- true if message is ssdp::alive. false if message is ssdp::byebye.

Methods
-------

.. index:: pair: function; Create
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a1a93b051bddcabc2d3182d971cd7fa04:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` Create(Args&&... args)

Create an instance.

.. index:: pair: function; Get_instance
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a4b1e8a2ebddc4aa9d9d225216d4431c2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename... Args>
	static :ref:`Ptr<doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a369d2f23ce01b27fe6ffe39de81e49c6>` Get_instance(Args&&... args)

Get global or create new object instance.

.. index:: pair: function; __DEFINE_CALLBACK_BUILDER_BODY
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa74fcb8e05e681318ab12d894f2e2593:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class __Callable, typename... __Args>
	__DEFINE_CALLBACK_BUILDER_BODY(
		Make_detection_handler,
		(std::string, std::string, std::string, std::string, bool),
		("", "", "", "", true)
		)

Builder for detection handler.

.. index:: pair: function; Advertise_service
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a625cb3d26f5fb4ca6e40d56d3601283f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Advertise_service(
		const std::string& type,
		const std::string& name,
		const std::string& location
		)

Sends out the NOTIFY ssdp:alive on all available interfaces.

Responds to M-SEARCH requests for given type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- location

		- Can contain special tag {local_address}, which will be replaced by the address of interface when sending out responses and notifications. Thus user application does not need to know local ip addresses even if dns is not used. Example: "http://{local_address}:12345/my_service/location.point" The broadcasted packet will have 'Location:' header like this: "Location: http://192.168.1.112:12345/my_service/location.point"

.. index:: pair: function; Unadvertise_service
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a2809577621a88a79c0de665e80ec7b5e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Unadvertise_service(
		const std::string& type,
		const std::string& name,
		const std::string& location
		)

Sends out the NOTIFY ssdp:byebye on all available interfaces.

Stop responding to M-SEARCH requests for given type.

.. index:: pair: function; Subscribe_for_service
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa92b1d285b5e15c5522f369d56ef7004:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Subscribe_for_service(const std::string& type, :ref:`Detection_handler<doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1ae8a986f070fe12613d3c6202f4898002>` handler, :ref:`Request_processor::Ptr<doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` context)

Sends out the M-SEARCH on all available interfaces.

Calls handler on each NOTIFY ssdp:alive and M-SEARCH response for given service type. handler must be valid callback until :ref:`Unsubscribe_from_service() <doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa110e572a49040805e17f387bc085c24>` called.

.. index:: pair: function; Search_for_service
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1a8d1a6c0e6b5ec34b65acab60f92d016a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Search_for_service(const std::string& type)

Sends out the M-SEARCH on all available interfaces.

In order to receive responses :ref:`Subscribe_for_service() <doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa92b1d285b5e15c5522f369d56ef7004>` must be called beforehand. Does nothing if there are no active subscriptions.

.. index:: pair: function; Unsubscribe_from_service
.. _doxid-d5/d17/classugcs_1_1vsm_1_1_service__discovery__processor_1aa110e572a49040805e17f387bc085c24:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Unsubscribe_from_service(const std::string& type)

Remove service type from subscription list.

Detection handlers will not be called for this service type.


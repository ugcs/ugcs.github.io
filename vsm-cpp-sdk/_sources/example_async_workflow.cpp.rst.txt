.. index:: pair: example; async_workflow.cpp
.. _doxid-d8/d89/async_workflow_8cpp-example:

async_workflow.cpp
==================

Example for asynchronous operations workflow.

Example for asynchronous operations workflow. See :ref:`corresponding tutorial <doxid-d4/da8/async_programming_page>`.

.. ref-code-block:: cpp

	// Copyright (c) 2018, Smart Projects Holdings Ltd
	// All rights reserved.
	// See LICENSE file for license details.
	
	#include <ugcs/vsm/vsm.h>
	
	/* Target function for callback. */
	int
	Sample_callback_function(int arg)
	{
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Sample callback function, arg: %d", arg);
	    return arg + 10;
	}
	class Sample_class {
	public:
	    int
	    Sample_callback_method(int arg)
	    {
	        :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Sample callback method, arg: %d", arg);
	        return arg + 10;
	    }
	};
	class Callable_class {
	public:
	    int x;
	
	    Callable_class(int x):
	        x(x)
	    {}
	
	    int
	    operator ()(int y)
	    {
	        :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Sample callback method, arg: %d", y);
	        return x + y;
	    }
	};
	/* Callbacks creation example. */
	void
	Simple_callbacks()
	{
	    auto func_cbk = :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(Sample_callback_function, 10);
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Callback call result: %d", func_cbk());
	    Sample_class class_instance;
	    auto method_cbk = :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(&Sample_class::Sample_callback_method,
	                                         &class_instance, 10);
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Callback call result: %d", method_cbk());
	    Callable_class callable_instance(10);
	    auto callable_cbk = :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(callable_instance, 10);
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Callback call result: %d", callable_cbk());
	    auto lambda_cbk = :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(
	        [](int arg)
	        {
	            :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Sample lambda callback, arg: %d", arg);
	            return arg + 10;
	        },
	        10);
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Callback call result: %d", lambda_cbk());
	}
	
	typedef :ref:`ugcs::vsm::Callback_proxy\<int, double> <doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>` Sample_handler_type;
	void
	Some_api_method(Sample_handler_type handler)
	{
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Callback result: %d", handler(20));
	}
	:ref:`DEFINE_CALLBACK_BUILDER <doxid-da/d05/callback_8h_1aa8f8b02e868d6b8ae25772a955b6d7d7>`(Sample_handler_builder, (double), (3.14))
	/* Illustration for using ugcs::vsm::Callback_proxy class */
	void
	Callback_proxies()
	{
	    auto My_callback_target = [](double enforced_arg, int user_arg)
	        {
	            :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Callback called, enforced argument %f user argument %d",
	                enforced_arg, user_arg);
	            return 30;
	        };
	    Some_api_method(Sample_handler_builder(My_callback_target, 10));
	}
	
	void
	Requests_and_contexts()
	{
	    /* Create waiter object for our contexts. */
	    :ref:`ugcs::vsm::Request_waiter::Ptr <doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a3d3b944e71e1b2c4bb50a670bf5502d4>` waiter = :ref:`ugcs::vsm::Request_waiter::Create <doxid-d1/d94/classugcs_1_1vsm_1_1_request__container_1_1_request__waiter_1a091f8971c953ca128e84d91567b00b52>`();
	    /* Create processor for requests. */
	    :ref:`ugcs::vsm::Request_processor::Ptr <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` processor = :ref:`ugcs::vsm::Request_processor::Create <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1aa503edaf7008fa1a923113518e074018>`("Processor", waiter);
	    /* Create completion context for notifications processing. */
	    :ref:`ugcs::vsm::Request_completion_context::Ptr <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx =
	            :ref:`ugcs::vsm::Request_completion_context::Create <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1aa503edaf7008fa1a923113518e074018>`("Completion context", waiter);
	    processor->Enable();
	    comp_ctx->Enable();
	    :ref:`ugcs::vsm::Request::Ptr <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` req = :ref:`ugcs::vsm::Request::Create <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a342da78756478193a27cc412074fb79f>`();
	    req->Set_processing_handler(
	        :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(
	            [](int arg, :ref:`ugcs::vsm::Request::Ptr <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` req)
	            {
	                :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Processing handler called, arg %d", arg);
	                req->Complete();
	            }, 10, req));
	    req->Set_completion_handler(comp_ctx,
	        :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(
	            [](int arg)
	            {
	                :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Completion notification handler called, arg %d", arg);
	            }, 20));
	    processor->Submit_request(req);
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Request submitted");
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Before processor running");
	    waiter->Wait_and_process({processor});
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("After processor running");
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Before completion context running");
	    waiter->Wait_and_process({comp_ctx});
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("After completion context running");
	    processor->Disable();
	    comp_ctx->Disable();
	    /* Demonstrate contexts serving in a separated thread. */
	    :ref:`ugcs::vsm::Request_worker::Ptr <doxid-d4/dcf/classugcs_1_1vsm_1_1_request__worker_1a24f61987e7b9b6cfd179e9a1c86125de>` worker = :ref:`ugcs::vsm::Request_worker::Create <doxid-d4/dcf/classugcs_1_1vsm_1_1_request__worker_1abe7b9cf9d6e427c71e7c1e52d373b527>`("Another thread",
	        std::initializer_list<ugcs::vsm::Request_container::Ptr>{processor, comp_ctx});
	    /* Enable all attached containers. */
	    worker->Enable_containers();
	    /* Enable the worker. This will launch its thread. */
	    worker->Enable();
	    req = :ref:`ugcs::vsm::Request::Create <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a342da78756478193a27cc412074fb79f>`();
	    req->Set_processing_handler(
	        :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(
	            [](int arg, :ref:`ugcs::vsm::Request::Ptr <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` req)
	            {
	                :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Processing handler called, arg %d", arg);
	                req->Complete();
	            }, 10, req));
	    req->Set_completion_handler(comp_ctx,
	        :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(
	            [](int arg)
	            {
	                :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Completion notification handler called, arg %d", arg);
	            }, 20));
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Before request submission");
	    processor->Submit_request(req);
	    /* Give a chance to process the request in a parallel thread. */
	    std::this_thread::sleep_for(std::chrono::seconds(1));
	    :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("After request submission");
	
	    /* Disable attached containers and the worker itself. */
	    worker->Disable_containers();
	    worker->Disable();
	}
	
	class Sample_processor: public :ref:`ugcs::vsm::Request_processor <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>` {
	    :ref:`DEFINE_COMMON_CLASS <doxid-d5/d60/utils_8h_1add7ad4e26c0e697e6eadb8da66c3e60d>`(Sample_processor, :ref:`ugcs::vsm::Request_processor <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context>`)
	public:
	    /* Type for result handler. */
	    typedef :ref:`ugcs::vsm::Callback_proxy\<void, double> <doxid-d0/db9/classugcs_1_1vsm_1_1_callback__proxy>` Handler;
	    /* Builder for handler. */
	    :ref:`DEFINE_CALLBACK_BUILDER <doxid-da/d05/callback_8h_1aa8f8b02e868d6b8ae25772a955b6d7d7>`(Make_handler, (double), (3.14));
	
	    Sample_processor() : :ref:`ugcs <doxid-d1/d6b/namespaceugcs>`::vsm:::ref:`Request_processor <doxid-dd/def/namespaceugcs_1_1vsm_1aaf87aa8291eb8db5efaf3dd1c72153cf>`("Sample processor") {}
	
	    /* The method for accessing processor provided services. */
	    :ref:`ugcs::vsm::Operation_waiter <doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>`
	    Sample_api_method(/* Some request parameter. */
	                      int param,
	                      /* Result handler. Default one does nothing thus discarding
	                       * the result.
	                       */
	                      Handler handler = ugcs::vsm::Make_dummy_callback<void, double>(),
	                      /* Completion context for result handler invocation. Default
	                       * value will use processor context.
	                       */
	                      :ref:`ugcs::vsm::Request_completion_context::Ptr <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx = nullptr);
	
	private:
	    /* Default completion context if the caller does not provide own one. */
	    :ref:`ugcs::vsm::Request_completion_context::Ptr <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` def_comp_ctx;
	    /* Worker with dedicated thread for this processor. */
	    :ref:`ugcs::vsm::Request_worker::Ptr <doxid-d4/dcf/classugcs_1_1vsm_1_1_request__worker_1a24f61987e7b9b6cfd179e9a1c86125de>` worker;
	
	    /* Request processing handler. It is always invoked in the processor dedicated thread. */
	    void
	    Process_api_call(int param, :ref:`ugcs::vsm::Request::Ptr <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request, Handler handler);
	
	    /* Called when the processor is enabled. */
	    virtual void
	    :ref:`On_enable <doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1af51d0c99a3437d4dd52fccc4cc0f1afe>`() override;
	
	    /* Called when the processor is enabled. */
	    virtual void
	    :ref:`On_disable <doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1a5fe483b1424749eef29a433dc8ddb6ba>`() override;
	};
	void
	Sample_processor::On_enable()
	{
	    :ref:`ugcs::vsm::Request_processor::On_enable <doxid-d3/d1f/classugcs_1_1vsm_1_1_request__container_1af51d0c99a3437d4dd52fccc4cc0f1afe>`();
	    def_comp_ctx = :ref:`ugcs::vsm::Request_completion_context::Create <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1aa503edaf7008fa1a923113518e074018>`("Completion context");
	    def_comp_ctx->Enable();
	    worker = :ref:`ugcs::vsm::Request_worker::Create <doxid-d4/dcf/classugcs_1_1vsm_1_1_request__worker_1abe7b9cf9d6e427c71e7c1e52d373b527>`("Worker",
	        std::initializer_list<ugcs::vsm::Request_container::Ptr>{Shared_from_this(), def_comp_ctx});
	    worker->Enable();
	}
	
	void
	Sample_processor::On_disable()
	{
	    Set_disabled();
	    worker->Disable();
	    def_comp_ctx->Disable();
	    def_comp_ctx = nullptr;
	    worker = nullptr;
	}
	:ref:`ugcs::vsm::Operation_waiter <doxid-d0/d74/classugcs_1_1vsm_1_1_operation__waiter>`
	Sample_processor::Sample_api_method(int param,
	                                    Handler handler,
	                                    :ref:`ugcs::vsm::Request_completion_context::Ptr <doxid-d7/dcd/classugcs_1_1vsm_1_1_request__context_1a470f700b033c20641c2076b2e76b9ccf>` comp_ctx)
	{
	    :ref:`ugcs::vsm::Request::Ptr <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` req = :ref:`ugcs::vsm::Request::Create <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a342da78756478193a27cc412074fb79f>`();
	    req->Set_processing_handler(
	        :ref:`ugcs::vsm::Make_callback <doxid-dd/def/namespaceugcs_1_1vsm_1ad0409b84278bc4bc1c8db2c993681dad>`(&Sample_processor::Process_api_call, Shared_from_this(),
	                           param, req, handler));
	    req->Set_completion_handler(comp_ctx ? comp_ctx : def_comp_ctx,
	                                handler);
	    Submit_request(req);
	    return req;
	}
	void
	Sample_processor::Process_api_call(int param, :ref:`ugcs::vsm::Request::Ptr <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a9fc856a23cf576b01649cabc8a6ce3ec>` request,
	                                   Handler handler)
	{
	    auto lock = request->Lock();
	    if (!request->Is_processing()) {
	        /* It might be canceled. */
	        return;
	    }
	    handler.Set_args(param * 2);
	    request->Complete(:ref:`ugcs::vsm::Request::Status::OK <doxid-d2/d26/classugcs_1_1vsm_1_1_request__container_1_1_request_1a7e8d9e205f783c829fcb5bdda00f6f76ae0aa021e21dddbd6d8cecec71e9cf564>`, std::move(lock));
	}
	void
	Custom_processor()
	{
	    Sample_processor::Ptr processor = Sample_processor::Create();
	    processor->Enable();
	
	    auto handler = Sample_processor::Make_handler(
	        [](double result, int user_param)
	        {
	            :ref:`LOG <doxid-d7/d7f/log_8h_1a159ca84d25a5487d8e81e4438725df19>`("Request completed, result %f, user param %d", result, user_param);
	        }, 30);
	    processor->Sample_api_method(10, handler);
	    /* Give a chance to process the request in a parallel thread. */
	    std::this_thread::sleep_for(std::chrono::seconds(1));
	
	    processor->Disable();
	}
	
	int
	main (int argc, char *argv[])
	{
	    :ref:`ugcs::vsm::Initialize <doxid-dd/def/namespaceugcs_1_1vsm_1a6a4d1d5dbdddf89a76e16382defa66fa>`(argc, argv);
	    Simple_callbacks();
	
	    Callback_proxies();
	
	    Requests_and_contexts();
	
	    Custom_processor();
	
	    :ref:`ugcs::vsm::Terminate <doxid-dd/def/namespaceugcs_1_1vsm_1a68e200f95017008b9119e042a114f587>`();
	    return 0;
	}

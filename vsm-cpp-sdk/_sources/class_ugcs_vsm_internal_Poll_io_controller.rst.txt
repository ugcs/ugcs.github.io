.. index:: pair: class; ugcs::vsm::internal::Poll_io_controller
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller:

class ugcs::vsm::internal::Poll_io_controller
=============================================

.. toctree::
	:hidden:

	struct_ugcs_vsm_internal_Poll_io_controller_Io_cb.rst
	class_ugcs_vsm_internal_Poll_io_controller_File_desc.rst

Overview
~~~~~~~~

Linux-specific implementation for I/O controller. :ref:`More...<details-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <poll_io_controller.h>
	
	class Poll_io_controller: public :ref:`ugcs::vsm::File_processor::Native_controller<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller>`
	{
	public:
		// structs
	
		struct :ref:`Io_cb<doxid-dd/dbb/structugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1_1_io__cb>`;

		// classes
	
		class :ref:`File_desc<doxid-d6/d61/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1_1_file__desc>`;

		// methods
	
		virtual void :ref:`Enable<doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a3ec2f490e4db51c486784876a0044b28>`();
		virtual void :ref:`Disable<doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a017cfadfa8a801fc0d384f44f767b0c4>`();
		virtual void :ref:`Register_handle<doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1afa6b87e26214420cad84428ba843fce8>`(:ref:`File_processor::Stream::Native_handle<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle>`&);
		virtual void :ref:`Unregister_handle<doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a07748977e236894f5fa8695d5795755b>`(:ref:`File_processor::Stream::Native_handle<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle>`&);
		void :ref:`Delete_handle<doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a86a9cea56cd94bd0b63277421baaa8af>`(int fd);
		bool :ref:`Queue_operation<doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a201c8654b679c09bc96ce27e03e538d8>`(:ref:`Io_cb<doxid-dd/dbb/structugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1_1_io__cb>`& io_cb);
		bool :ref:`Cancel_operation<doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1ad2b957e2ff0553be14364dc9a8b62644>`(:ref:`Io_cb<doxid-dd/dbb/structugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1_1_io__cb>`& io_cb);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual void :ref:`Enable<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller_1adef24f99b91c2b8e334b109b3dbd4f9d>`() = 0;
		virtual void :ref:`Disable<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller_1af8279aabc8eac87eb7f9c20c41e5c0a6>`() = 0;
		virtual void :ref:`Register_handle<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller_1acb77d1182559fcf8d8bffe9eb32b2f8c>`(:ref:`Stream::Native_handle<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle>`& handle) = 0;
		virtual void :ref:`Unregister_handle<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller_1a663897a4c5853bba28b45e4d39a79ee2>`(:ref:`Stream::Native_handle<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle>`& handle) = 0;
		static std::unique_ptr<:ref:`Native_controller<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller>`> :ref:`Create<doxid-d4/d55/classugcs_1_1vsm_1_1_file__processor_1_1_native__controller_1a114967e059329ae40f425cf0d9d7992a>`();

.. _details-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Linux-specific implementation for I/O controller.

Methods
-------

.. index:: pair: function; Enable
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a3ec2f490e4db51c486784876a0044b28:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual void Enable()

Enable the controller.

.. index:: pair: function; Disable
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a017cfadfa8a801fc0d384f44f767b0c4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual void Disable()

Disable the controller.

.. index:: pair: function; Register_handle
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1afa6b87e26214420cad84428ba843fce8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual void Register_handle(:ref:`File_processor::Stream::Native_handle<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle>`&)

Register new opened file handle.

.. index:: pair: function; Unregister_handle
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a07748977e236894f5fa8695d5795755b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual void Unregister_handle(:ref:`File_processor::Stream::Native_handle<doxid-d2/dda/classugcs_1_1vsm_1_1_file__processor_1_1_stream_1_1_native__handle>`&)

Unregister previously registered file handle.

.. index:: pair: function; Delete_handle
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a86a9cea56cd94bd0b63277421baaa8af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Delete_handle(int fd)

Delete handle.

Possibly deferred. This is a workaround of kernel panic bug in OSX. The scenario: 1) create pipe with descriptors p1, p2. 2) open serial port with descriptor fd. 3) poll on two descriptors p1 and fd in separate thread. 4) issue write on p2. This triggers read event on p1 and wakes up poll(). 5) close(fd)

Results:

* When (4) and (5) are close enough poll does not wake up and close(fd) blocks and triggers kernel panic. This does not happen 100% of time but if the above code is put into loop it takes ~20-100 iterations to trigger.

* When (4) and (5) are >10ms apart the poll wakes up and close succeeds.

* If close(fd) is called before write(p2) then I could not repeat the kernel panic. Solution:

Do not close the fd while it is in polling state. Close it after poll returns.

.. index:: pair: function; Queue_operation
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1a201c8654b679c09bc96ce27e03e538d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool Queue_operation(:ref:`Io_cb<doxid-dd/dbb/structugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1_1_io__cb>`& io_cb)

Queue IO operation.

The provided callback is called when the operation completes with :ref:`Io_cb <doxid-dd/dbb/structugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1_1_io__cb>` structure filled.



.. rubric:: Returns:

True if succeeded, false otherwise. Check errno for error code.

.. index:: pair: function; Cancel_operation
.. _doxid-d2/db0/classugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1ad2b957e2ff0553be14364dc9a8b62644:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool Cancel_operation(:ref:`Io_cb<doxid-dd/dbb/structugcs_1_1vsm_1_1internal_1_1_poll__io__controller_1_1_io__cb>`& io_cb)

Cancel pending operation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- io_cb

		- Operation control block.



.. rubric:: Returns:

True if cancelled, false if not cancelled (e.g. too late).

